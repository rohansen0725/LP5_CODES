# -*- coding: utf-8 -*-
"""HPC4_CUDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pxsUSQcSHHVOkZ-R1M_uQcFQFR0TP2am
"""

!pip install git+https://github.com/afnan47/cuda.git

# Commented out IPython magic to ensure Python compatibility.
# %load_ext nvcc_plugin

# Commented out IPython magic to ensure Python compatibility.
# # ass4 addition of two large vector
# %%writefile ass4twolargevector.cu
# 
# 
# #include <iostream>
# using namespace std;
# 
# __global__ void add(int* A, int* B, int* C, int size) {
#     int tid = blockIdx.x * blockDim.x + threadIdx.x;
#     if (tid < size) {
#         C[tid] = A[tid] + B[tid];
#     }
# }
# 
# void initialize(int* vector, int size) {
#     for (int i = 0; i < size; i++) {
#         vector[i] = rand()%10;
#     }
# }
# 
# void print(int* vector, int size) {
#     for (int i = 0; i < size; i++) {
#         cout << vector[i] << " ";
#     }
#     cout << endl;
# }
# 
# int main() {
#     int N = 4;
#     int* A, * B, * C;
#     int vectorSize = N;
#     size_t vectorBytes = vectorSize * sizeof(int);
# 
#     A = new int[vectorSize];
#     B = new int[vectorSize];
#     C = new int[vectorSize];
# 
#     initialize(A, vectorSize);
#     initialize(B, vectorSize);
# 
#     cout << "Vector A: ";
#     print(A, N);
#     cout << "Vector B: ";
#     print(B, N);
# 
#     int* X, * Y, * Z;
#     cudaMalloc(&X, vectorBytes);
#     cudaMalloc(&Y, vectorBytes);
#     cudaMalloc(&Z, vectorBytes);
# 
#     cudaMemcpy(X, A, vectorBytes, cudaMemcpyHostToDevice);
#     cudaMemcpy(Y, B, vectorBytes, cudaMemcpyHostToDevice);
# 
#     int threadsPerBlock = 256;
#     int blocksPerGrid = (N + threadsPerBlock - 1) / threadsPerBlock;
#     add<<<blocksPerGrid, threadsPerBlock>>>(X, Y, Z, N);
# 
#     cudaMemcpy(C, Z, vectorBytes, cudaMemcpyDeviceToHost);
# 
#     cout << "Addition: ";
#     print(C, N);
# 
#     delete[] A;
#     delete[] B;
#     delete[] C;
#     cudaFree(X);
#     cudaFree(Y);
#     cudaFree(Z);
# 
#     return 0;
# }
#

!nvcc -o ass4twolargevector ass4twolargevector.cu -Xcompiler -fopenmp
!./ass4twolargevector

# Commented out IPython magic to ensure Python compatibility.
# # ass 4 matrix multiplication
# %%writefile ass4matrixmultiplication.cu
# 
# 
# // matrix_multiplication.cu
# 
# #include <iostream>
# using namespace std;
# 
# __global__ void multiply(int* A, int* B, int* C, int size) {
#     int row = blockIdx.y * blockDim.y + threadIdx.y;
#     int col = blockIdx.x * blockDim.x + threadIdx.x;
# 
#     if (row < size && col < size) {
#         int sum = 0;
#         for (int i = 0; i < size; i++) {
#             sum += A[row * size + i] * B[i * size + col];
#         }
#         C[row * size + col] = sum;
#     }
# }
# 
# int main() {
#     const int N = 2;
#     const int matrixSize = N * N;
#     const size_t matrixBytes = matrixSize * sizeof(int);
# 
#     int* A, * B, * C;
#     A = new int[matrixSize];
#     B = new int[matrixSize];
#     C = new int[matrixSize];
# 
#     // Initialize matrices A and B
#     for (int i = 0; i < matrixSize; i++) {
#         A[i] = rand() % 10;
#         B[i] = rand() % 10;
#     }
# 
#     // Print matrices A and B
#     cout << "Matrix A: \n";
#     for (int i = 0; i < matrixSize; i++) {
#         cout << A[i] << " ";
#         if ((i + 1) % N == 0) cout << endl;
#     }
#     cout << endl;
# 
#     cout << "Matrix B: \n";
#     for (int i = 0; i < matrixSize; i++) {
#         cout << B[i] << " ";
#         if ((i + 1) % N == 0) cout << endl;
#     }
#     cout << endl;
# 
#     int* d_A, * d_B, * d_C;
#     cudaMalloc(&d_A, matrixBytes);
#     cudaMalloc(&d_B, matrixBytes);
#     cudaMalloc(&d_C, matrixBytes);
# 
#     cudaMemcpy(d_A, A, matrixBytes, cudaMemcpyHostToDevice);
#     cudaMemcpy(d_B, B, matrixBytes, cudaMemcpyHostToDevice);
# 
#     dim3 threadsPerBlock(16, 16);
#     dim3 numBlocks((N + 15) / 16, (N + 15) / 16);
# 
#     multiply<<<numBlocks, threadsPerBlock>>>(d_A, d_B, d_C, N);
# 
#     cudaMemcpy(C, d_C, matrixBytes, cudaMemcpyDeviceToHost);
# 
#     // Print result matrix C
#     cout << "Result Matrix C: \n";
#     for (int i = 0; i < matrixSize; i++) {
#         cout << C[i] << " ";
#         if ((i + 1) % N == 0) cout << endl;
#     }
#     cout << endl;
# 
#     delete[] A;
#     delete[] B;
#     delete[] C;
#     cudaFree(d_A);
#     cudaFree(d_B);
#     cudaFree(d_C);
# 
#     return 0;
# }
#
# -*- coding: utf-8 -*-
"""HPC1_DFS_BFS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kX52BvV7TMlcqMuQux0IoTTlPXvHzb55
"""

!pip install git+https://github.com/afnan47/cuda.git

# Commented out IPython magic to ensure Python compatibility.
# %load_ext nvcc_plugin

# Commented out IPython magic to ensure Python compatibility.
# %%cu
# #include <iostream>
# int main(){
#   std::cout << "Hello World\n";
#   return 0;
# }

# Commented out IPython magic to ensure Python compatibility.
# %%writefile ass1.cu
# 
# #include <iostream>
# #include <vector>
# #include <queue>
# #include <omp.h>
# 
# using namespace std;
# 
# class Graph {
#     int V; // Number of vertices
#     vector<vector<int>> adj; // Adjacency list
# public:
#     Graph(int V) : V(V), adj(V) {}
#     // Add an edge to the graph
#     void addEdge(int v, int w) {
#         adj[v].push_back(w);
#     }
#     // Parallel Depth-First Search
#     void parallelDFS(int startVertex) {
#         vector<bool> visited(V, false);
#         double startTime = omp_get_wtime();
#         parallelDFSUtil(startVertex, visited);
#         double endTime = omp_get_wtime();
#         cout << "\nExecution Time (DFS): " << endTime - startTime << " seconds" << endl;
#     }
#     // Parallel DFS utility function
#     void parallelDFSUtil(int v, vector<bool>& visited) {
#         visited[v] = true;
#         cout << v << " ";
#         #pragma omp parallel for
#         for (int i = 0; i < adj[v].size(); ++i) {
#             int n = adj[v][i];
#             if (!visited[n])
#                 parallelDFSUtil(n, visited);
#         }
#     }
#     // Parallel Breadth-First Search
#     void parallelBFS(int startVertex) {
#         vector<bool> visited(V, false);
#         queue<int> q;
#         double startTime = omp_get_wtime();
#         visited[startVertex] = true;
#         q.push(startVertex);
#         while (!q.empty()) {
#             int v = q.front();
#             q.pop();
#             cout << v << " ";
#             #pragma omp parallel for
#             for (int i = 0; i < adj[v].size(); ++i) {
#                 int n = adj[v][i];
#                 if (!visited[n]) {
#                     visited[n] = true;
#                     q.push(n);
#                 }
#             }
#         }
#         double endTime = omp_get_wtime();
#         cout << "\nExecution Time (BFS): " << endTime - startTime << " seconds" << endl;
#     }
# };
# 
# int main() {
#     // Create a graph
#     Graph g(7);
#     g.addEdge(0, 1);
#     g.addEdge(0, 2);
#     g.addEdge(1, 3);
#     g.addEdge(1, 4);
#     g.addEdge(2, 5);
#     g.addEdge(2, 6);
#     cout << "Depth-First Search (DFS): ";
#     g.parallelDFS(0);
#     cout << endl;
#     cout << "Breadth-First Search (BFS): ";
#     g.parallelBFS(0);
#     cout << endl;
#     return 0;
# }

!nvcc -o ass1 ass1.cu -Xcompiler -fopenmp
!./ass1